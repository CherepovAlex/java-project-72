package hexlet.code;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import hexlet.code.controllers.RootController;
import hexlet.code.controllers.UrlController;
import hexlet.code.controllers.UrlCheckController;

import hexlet.code.repository.BaseRepository;

import io.javalin.Javalin;
import io.javalin.rendering.template.JavalinThymeleaf;

import lombok.extern.slf4j.Slf4j;

import nz.net.ultraq.thymeleaf.layoutdialect.LayoutDialect;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.extras.java8time.dialect.Java8TimeDialect;
import org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Slf4j
public class App {

    private static final String DEFAULT_PORT = "8081";
    private static final String DEFAULT_MODE = "production";
    private static final String ADDITIONAL_MODE = "development";
    private static HikariDataSource dataSource;

    public static void main(String[] args) throws SQLException, IOException {
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            if (dataSource != null) {
                log.info("Closing database connection pool...");
                dataSource.close();
            }
        }));
        Javalin app = getApp();
        app.start(getPort());
    }

    private static boolean isProduction() {
        return getMode().equals(DEFAULT_MODE);
    }

    public static Javalin getApp() throws IOException, SQLException {

        HikariConfig hikariConfig = new HikariConfig();
        hikariConfig.setJdbcUrl(getDatabaseUrl());
        dataSource = new HikariDataSource(hikariConfig);
        var url = App.class.getClassLoader().getResource("schema.sql");

        File file;
        String sql;

        if (url != null) {
            try {
                file = new File(url.getFile());
                try (Stream<String> lines = Files.lines(file.toPath())) {
                    sql = lines.collect(Collectors.joining("\n"));
                }
            } catch (NoSuchFileException e) {
                sql = getDefaultSchema();
            }
        } else {
            sql = getDefaultSchema();
        }

        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            statement.execute(sql);
        }

        BaseRepository.dataSource = dataSource;

        Javalin app = Javalin.create(config -> {
            if (!isProduction()) {
                config.bundledPlugins.enableDevLogging();
            }
            config.fileRenderer(new JavalinThymeleaf(getTemplateEngine()));
        });

        app.exception(Exception.class, (e, ctx) -> {
            log.error("Unhandled exception", e);
            ctx.status(500);
            ctx.result("Internal server error");
        });

        app.error(404, ctx -> {
            ctx.status(404);
            ctx.result("Not found");
        });

        addRoutes(app);

        app.before(ctx -> {
            ctx.attribute("ctx", ctx);
        });

        return app;
    }
    private static String getDefaultSchema() {
        return """
            DROP TABLE IF EXISTS urls;
            CREATE TABLE urls (
                id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                name       VARCHAR(255),
                created_at TIMESTAMP                               NOT NULL
            );
            DROP TABLE IF EXISTS url_checks;
            CREATE TABLE url_checks (
                id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                status_code INTEGER                                 NOT NULL,
                title       VARCHAR(255),
                h1          VARCHAR(255),
                description TEXT,
                created_at  TIMESTAMP                               NOT NULL,
                url_id      BIGINT                                  NOT NULL
            );
            """;
    }

    private static void addRoutes(Javalin app) {
        app.get("/", RootController.welcome);
        app.get("/urls", UrlController.showUrls);
        app.post("/urls", UrlController.createUrl);
        app.get("/urls/{id}", UrlController.showUrlById);
        app.post("/urls/{id}/checks", UrlCheckController.addCheck);
    }

    private static String getMode() {
        return System.getenv()
                .getOrDefault("APP_ENV", ADDITIONAL_MODE);
    }

    private static int getPort() {
        String port = System.getenv().getOrDefault("PORT", DEFAULT_PORT);
        return Integer.parseInt(port);
    }

    private static String getDatabaseUrl() {
        return System.getenv()
                .getOrDefault("JDBC_DATABASE_URL", "jdbc:h2:mem:project");
    }

    private static TemplateEngine getTemplateEngine() {

        TemplateEngine templateEngine = new TemplateEngine();
        ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();
        templateResolver.setPrefix("/templates/");
        templateResolver.setSuffix(".html");
        templateResolver.setCharacterEncoding("UTF-8");

        templateEngine.addTemplateResolver(templateResolver);
        templateEngine.addDialect(new LayoutDialect());
        templateEngine.addDialect(new Java8TimeDialect());

        return templateEngine;
    }

    public static void stop() {
        if (dataSource != null) {
            dataSource.close();
            dataSource = null;
        }
    }
}
